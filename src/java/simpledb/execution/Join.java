package simpledb.execution;

import java.util.NoSuchElementException;

import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;
import simpledb.transaction.TransactionAbortedException;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {
	
    private static final long serialVersionUID = 1L;
    private final JoinPredicate predicate;
    private OpIterator child1;
    private TupleDesc t1;
    private OpIterator child2;
    private TupleDesc t2;
    private Tuple tuple1;
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // TODO: some code goes here
    	this.predicate = p;
    	this.child1 = child1;
    	this.t1 = child1.getTupleDesc();
    	this.child2 = child2;
    	this.t2 = child2.getTupleDesc();
    }

    public JoinPredicate getJoinPredicate() {
        // TODO: some code goes here
        return this.predicate;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField1Name() {
        // TODO: some code goes here
        return t1.getFieldName(predicate.getField1());
    }

    /**
     * @return the field name of join field2. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField2Name() {
        // TODO: some code goes here
        return t2.getFieldName(predicate.getField2());
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *         implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // TODO: some code goes here
        return TupleDesc.merge(t1, t2);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // TODO: some code goes here
    	child1.open();
    	child2.open();
    	super.open();
    }

    public void close() {
        // TODO: some code goes here
    	super.close();
    	child1.close();
    	child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // TODO: some code goes here
    	child1.rewind();
    	child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // TODO: some code goes here
    	while (tuple1 != null || child1.hasNext()){
            if(tuple1 == null){
                if(child1.hasNext()){
                	tuple1 = child1.next();
                }else{
                    return null;
                }
            }
            if(!child2.hasNext()){
                if(child1.hasNext()){
                    child2.rewind();
                    tuple1 = child1.next();
                }else{
                    return null;
                }
            }
        	while(child2.hasNext()) {
            	Tuple tuple2 = child2.next();
            	if(predicate.filter(tuple1, tuple2)) {
            		Tuple ret = new Tuple(getTupleDesc());
            		for(int i = 0; i < t1.numFields(); i++) {
            			ret.setField(i, tuple1.getField(i));
            		}
            		for(int i = t1.numFields(); i < t1.numFields() + t2.numFields(); i++) {
            			ret.setField(i, tuple2.getField(i - t1.numFields()));
            		}
            		return ret;
            	}
        	}
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // TODO: some code goes here
        return new OpIterator[] {child1, child2};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // TODO: some code goes here
    	if(children != null && children.length >= 2) {
    		child1 = children[0];
    		t1 = child1.getTupleDesc();
    		child2 = children[1];
    		t2 = child2.getTupleDesc();
    	}
    }

}
